// @generated automatically by Diesel CLI.

use diesel::joinable;

diesel::table! {
    /// Representation of the `book` table.
    ///
    /// (Automatically generated by Diesel.)
    book (id) {
        /// The `id` column of the `book` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 32]
        id -> Varchar,
        /// The `name` column of the `book` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 32]
        name -> Varchar,
    }
}

diesel::table! {
    /// Representation of the `post` table.
    ///
    /// (Automatically generated by Diesel.)
    post (id) {
        /// The `id` column of the `post` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 32]
        id -> Varchar,
        /// The `book_id` column of the `post` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 32]
        book_id -> Varchar,
        /// The `name` column of the `post` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 32]
        name -> Varchar,
    }
}

joinable!(post -> book (book_id));

diesel::allow_tables_to_appear_in_same_query!(book, post,);
